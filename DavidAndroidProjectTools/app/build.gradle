apply plugin: 'com.android.application'
//apply plugin: 'android-apt'
android {
    compileSdkVersion 23
    buildToolsVersion "26.0.2"
/*    compileSdkVersion 23
    buildToolsVersion "23.0.3"*/
    defaultConfig {
        applicationId "davidandroidprojecttools.qq986945193.com.davidandroidprojecttools"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 2
        versionName "1.1"
        // dex突破65535的限制
        multiDexEnabled true
        flavorDimensions "versionCode"
        /* 腾讯bugly升级的引用*/
//        ndk {
//            //设置支持的SO库架构
//            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//        }
    }

    /**
     * 配置签名文件
     */
    signingConfigs {
        davidConfig {
            /*keytool中生成证书的时候的随机值（别名）,*/
            keyAlias 'david'
            /*在签名过程中所需要的密钥*/
            keyPassword '123456'
            //根据自己电脑上的签名秘钥配置 keystore证书在磁盘中的位置
            //storeFile file('D:/DavidAndroidProjectTools.jks')
            storeFile file('/Users/david/workspace/androidStudioWorkspace/DavidAndroidProjectTools/app/src/main/DavidAndroidProjectTools.jks')

//            storeFile file('H:\\StudioWork\\DavidAndroidProjectTools\\app\\src\\main\\DavidAndroidProjectTools.jks')
            /*keystore证书的密码*/
            storePassword '123456'
        }
    }
    /**
     * 设置生成apk文件 一定要在signingConfigs下面
     */
    buildTypes {
        release {
            /* 属性minifyEnabled可以在打包的时候去除掉无用的代码，是否对代码混淆、压缩*/
            minifyEnabled false
            /*是否对资源压缩。打开资源压缩。这句话的 主要 是设置混淆过程中压缩资源文件 因为这句话只有开启混淆后才会有效*/
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.davidConfig
        }

        debug {

            signingConfig signingConfigs.davidConfig
        }
    }

    /**
     * 这里配置自定义多渠道打包
     *
     */
//    如果我们想打包wandoujia渠道的release版本，执行如下命令就好了：
//    ./gradlew assembleWandoujiaRelease
//    如果我们只打wandoujia渠道版本，则：
//     ./gradlew assembleWandoujia
//    此命令会生成wandoujia渠道的Release和Debug版本
//    同理我想打全部Release版本：
//    ./gradlew assembleRelease
//     这条命令会把Product Flavor下的所有渠道的Release版本都打出来。
    productFlavors {
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }

        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
        }

        m360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "m360"]
        }

        qq {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qq"]
        }
    }
    /**
     * 这里也可以写多渠道打包的配置。更简洁。
     */
//    productFlavors {
//
//        wandoujia {}
//        baidu {}
//        m360 {}
//        qq {}
//
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
//
//    }

    /**
     * 解决错误(关闭警告)：
     *
     * `Error:Execution failed for task ‘:app:lintVitalRelease’.
     */
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    /**
     * 这里可以自定义设置我们的支持jdk版本
     */
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:cardview-v7:23.1.0'
    //Gson用来解析json
    //    compile 'com.google.code.gson:gson:2.7'
    //Picasso用来显示图片
    //    compile 'com.squareup.picasso:picasso:2.3.2'
    /*Umeng统计引入工具  可以使用jar文件，这里使用gradle方式*/
    compile 'com.umeng.analytics:analytics:latest.integration'
    //BadgeView的引入
    compile files('libs/badgeview.jar')
    //Gson解析工具的引入
    compile files('libs/gson-2.3.1.jar')
    //Picasso的引入
    compile files('libs/picasso-2.5.2.jar')
    //EventBus的引入
    compile files('libs/eventbus-2.4.0.jar')
    //Imageloader的引入
    compile files('libs/universal-image-loader-1.9.4-with-sources.jar')
    //volley的引入
    compile files('libs/volly-1.0.11.jar')
    //xutils引入
    compile files('libs/xUtils-2.6.14.jar')
    //zxing二维码的引入
    compile files('libs/zxing.jar')
    //glide的引用
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //Okhttp的引用
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    //fresco的引入
    compile 'com.facebook.fresco:fresco:0.13.0'
    /*引入multidex库文件1.0.0会出现警告信息，1.0.1不回出现第三方jar警告信息*/
    compile 'com.android.support:multidex:1.0.1'
    /*增加注解的使用 butterknife*/
    compile 'com.jakewharton:butterknife:8.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.1.0'
    //增加这一句
    /*使用一款开源的loading框架，要求最低sdk == 15*/
    compile 'com.github.d-max:spots-dialog:0.7@aar'
    /*引用高德地图的SDK进行定位*/
    compile files('libs/AMap_Location_v2.3.0_20160112.jar')
    /*注释掉原有bugly的仓库 腾讯bugly升级以及Crash的引用*/
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如
    //compile 'com.tencent.bugly:crashreport:latest.release'1.2.9
    /*  其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.0*/
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    /*引入代码家的viewpager滚动效果*/
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.daimajia.slider:library:1.1.5@aar'
    /*引入圆形图片的library*/
    //    compile 'de.hdodenhof:circleimageview:2.1.0'
    //    compile 'com.mcxiaoke.volley:library:1.0.19'
    /*QQ第三方登录的sdk*/
    //compile files('libs/open_qq_sdk_r5781.jar')
    compile files('libs/tencent_mta-sdk-1.6.2.jar')
    /*微博第三方登录的sdk*/
    compile files('libs/weiboSDKCore_3.1.4.jar')
    /*微信第三方登录的sdk*/
    compile files('libs/wechat_libammsdk.jar')
    compile files('libs/alipaySdk-20160516.jar')
}
